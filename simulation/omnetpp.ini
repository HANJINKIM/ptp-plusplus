[General]
sim-time-limit = 100s

# configuration to use at startup
#tkenv-default-config = PtpSim

repeat = 10
seed-set = ${repetition}

# additional RNGs so that the clocks
# get the same numbers (too compare them)
num-rngs = 4
#seed-1-mt = 1389532321
#seed-2-mt = 1389532321
#seed-3-mt = 1389532321
#seed-4-mt = 1389532321

**.hwClock.**.vector-recording = true
**.swClock.**.vector-recording = true
**.ptpImplementation.**.vector-recording = true
**.StatsCollector.**.vector-recording = true
**.udpApp[*].**.vector-recording = true
**.vector-recording = false


**.configurator.assignDisjunctSubnetAddresses = false
**.configurator.addStaticRoutes = false
**.configurator.addSubnetRoutes = true
**.configurator.addDefaultRoutes = true
**.configurator.optimizeRoutes = false
**.configurator.dumpAddresses = true
**.configurator.dumpRoutes = true

**.s[*].numUdpApps = 1
**.s[*].udpApp[*].typename = "PtpSlave"
**.s[*].udpApp[0].localPort = 319
**.s[*].udpApp[0].destPort = 319
**.s[*].udpApp[0].joinLocalMulticastGroups = true
**.s[*].udpApp[0].destAddresses = \
     "225.0.0.2"

**.m.numUdpApps = 1
**.m.udpApp[*].typename = "PtpMaster"
**.m.udpApp[0].localPort = 319
**.m.udpApp[0].destPort = 319
**.m.udpApp[0].destAddresses = \
     "225.0.0.1"

**.m.udpApp[0].joinLocalMulticastGroups = true


**.m.udpApp[*].syncRate = 10

**.s[*].hwClockType = "BoundedDriftVariation"
**.s[*].hwClock.start_value = -5e-6
#**.s[*].hwClock.start_value = -5e-4
**.s[*].hwClock.drift_distribution = normal(0, 10e-5, 1)


# slave 2 is to compare (doesn't adjust its clock)
**.s[*].udpApp[0].controllerEnabled = false
**.s[*].udpApp[0].delayRequestIntervalType = "fixed"

**.s[0].udpApp[0].delayRequestIntervalValue = 0.0001
**.s[1].udpApp[0].delayRequestIntervalValue = 0.001
**.s[2].udpApp[0].delayRequestIntervalValue = 0.002
**.s[3].udpApp[0].delayRequestIntervalValue = 0.003
**.s[4].udpApp[0].delayRequestIntervalValue = 0.004
**.s[5].udpApp[0].delayRequestIntervalValue = 0.005
**.s[6].udpApp[0].delayRequestIntervalValue = 0.006
**.s[7].udpApp[0].delayRequestIntervalValue = 0.007
**.s[8].udpApp[0].delayRequestIntervalValue = 0.008
**.s[9].udpApp[0].delayRequestIntervalValue = 0.009

##########################################################################
[Config Basic]
network = BasicNetwork

**.configurator.config = xmldoc("basicConfig.xml")

BasicNetwork.slaves = 10

##########################################################################
[Config BasicWithTrafficInjection]
network = BasicWithTrafficInjectionNetwork

# Queue limit:

**.configurator.config = xmldoc("basicWithTrafficInjectionConfig.xml")

BasicWithTrafficInjectionNetwork.slaves = 10

# L = 89, M = 2678, H = 8035
BasicWithTrafficInjectionNetwork.backgroundDownstreamTrafficPacketsPerSec = 89 #${(8000/15) * 0,(8000/15) * 1,(8000/15) * 2,(8000/15) * 3,(8000/15) * 4,(8000/15) * 5,(8000/15) * 6,(8000/15) * 7,(8000/15) * 8,(8000/15) * 9,(8000/15) * 10,(8000/15) * 11,(8000/15) * 12,(8000/15) * 13,(8000/15) * 14,(8000/15) * 15 }
BasicWithTrafficInjectionNetwork.backgroundUpstreamTrafficPacketsPerSec = 89 #${(8000/40) * 0,(8000/40) * 1,(8000/40) * 2,(8000/40) * 3,(8000/40) * 4,(8000/40) * 5,(8000/40) * 6,(8000/40) * 7,(8000/40) * 8,(8000/40) * 9,(8000/40) * 10,(8000/40) * 11,(8000/40) * 12,(8000/40) * 13,(8000/40) * 14,(8000/40) * 15,(8000/40) * 16,(8000/40) * 17,(8000/40) * 18,(8000/40) * 19,(8000/40) * 20,(8000/40) * 21,(8000/40) * 22,(8000/40) * 23,(8000/40) * 24,(8000/40) * 25,(8000/40) * 26,(8000/40) * 27,(8000/40) * 28,(8000/40) * 29,(8000/40) * 30,(8000/40) * 31,(8000/40) * 32,(8000/40) * 33,(8000/40) * 34,(8000/40) * 35,(8000/40) * 36,(8000/40) * 37,(8000/40) * 38,(8000/40) * 39,(8000/40) * 40 }

# * 0 or * 20
BasicWithTrafficInjectionNetwork.extraPTPUpstreamDelay = 0.0000075s * 0 #${0.0000s, 0.0000075s * 1, 0.0000075s * 2, 0.0000075s * 3, 0.0000075s * 4, 0.0000075s * 5, 0.0000075s * 6, 0.0000075s * 7, 0.0000075s * 8, 0.0000075s * 9, 0.0000075s * 10, 0.0000075s * 11, 0.0000075s * 12, 0.0000075s * 13, 0.0000075s * 14, 0.0000075s * 15, 0.0000075s * 16, 0.0000075s * 17, 0.0000075s * 18, 0.0000075s * 19, 0.0000075s * 20}

BasicWithTrafficInjectionNetwork.asymmetricCapacity = 100Mbps # 100Mbps or 1Gbps

BasicWithTrafficInjectionNetwork.nbPTPDuppToSend = 4

**.trafSource.numUdpApps = 2
**.trafSource.udpApp[0].typename = "UberUDPBasicApp"
**.trafSource.udpApp[0].destAddresses = "trafDest"
**.trafSource.udpApp[0].destPort = 3000
**.trafSource.udpApp[0].messageLength = "StatsCollector.backgroundTrafficMessageLength"
**.trafSource.udpApp[0].sendInterval = "StatsCollector.backgroundTrafficDownstreamOfferedLoad"
**.trafSource.udpApp[0].sendIntervalParetoShape = 1.5
**.trafSource.udpApp[0].sendIntervalDistribution = "pareto"

**.trafSource.udpApp[1].typename = "UberUDPSink"
**.trafSource.udpApp[1].localPort = 3000

**.trafDest.numUdpApps = 2
**.trafDest.udpApp[0].typename = "UberUDPBasicApp"
**.trafDest.udpApp[0].destAddresses = "trafSource"
**.trafDest.udpApp[0].destPort = 3000
**.trafDest.udpApp[0].messageLength = "StatsCollector.backgroundTrafficMessageLength"
**.trafDest.udpApp[0].sendInterval = "StatsCollector.backgroundTrafficUpstreamOfferedLoad"
**.trafDest.udpApp[0].sendIntervalParetoShape = 1.5
**.trafDest.udpApp[0].sendIntervalDistribution = "pareto"

**.trafDest.udpApp[1].typename = "UberUDPSink"
**.trafDest.udpApp[1].localPort = 3000

**.s[*].udpApp[*].ptpPostAsymmAlgo = ""
**.m.udpApp[*].ptpPostAsymmAlgo = ""

**.s[*].udpApp[*].nbPTPDuppToSend = "StatsCollector.nbPTPDuppToSend"
**.m.udpApp[*].nbPTPDuppToSend = "StatsCollector.nbPTPDuppToSend"

**.s[*].udpApp[*].withProbeClass = false
**.m.udpApp[*].withProbeClass = false

**.**.eth[*].queueType = "PtpPrioritizedQueue" # PtpPrioritizedQueue

[Config AsymmetryParameterDmsTest]
network = BasicWithTrafficInjectionNetwork

# Queue limit:

**.configurator.config = xmldoc("basicWithTrafficInjectionConfig.xml")

BasicWithTrafficInjectionNetwork.slaves = 10

# L = 89, M = 2678, H = 8035
BasicWithTrafficInjectionNetwork.backgroundDownstreamTrafficPacketsPerSec = 89 #${(8000/15) * 0,(8000/15) * 1,(8000/15) * 2,(8000/15) * 3,(8000/15) * 4,(8000/15) * 5,(8000/15) * 6,(8000/15) * 7,(8000/15) * 8,(8000/15) * 9,(8000/15) * 10,(8000/15) * 11,(8000/15) * 12,(8000/15) * 13,(8000/15) * 14,(8000/15) * 15 }
BasicWithTrafficInjectionNetwork.backgroundUpstreamTrafficPacketsPerSec = 89 #${(8000/40) * 0,(8000/40) * 1,(8000/40) * 2,(8000/40) * 3,(8000/40) * 4,(8000/40) * 5,(8000/40) * 6,(8000/40) * 7,(8000/40) * 8,(8000/40) * 9,(8000/40) * 10,(8000/40) * 11,(8000/40) * 12,(8000/40) * 13,(8000/40) * 14,(8000/40) * 15,(8000/40) * 16,(8000/40) * 17,(8000/40) * 18,(8000/40) * 19,(8000/40) * 20,(8000/40) * 21,(8000/40) * 22,(8000/40) * 23,(8000/40) * 24,(8000/40) * 25,(8000/40) * 26,(8000/40) * 27,(8000/40) * 28,(8000/40) * 29,(8000/40) * 30,(8000/40) * 31,(8000/40) * 32,(8000/40) * 33,(8000/40) * 34,(8000/40) * 35,(8000/40) * 36,(8000/40) * 37,(8000/40) * 38,(8000/40) * 39,(8000/40) * 40 }

# * 0 or * 20
BasicWithTrafficInjectionNetwork.extraPTPUpstreamDelay = 0.0000075s * 0 #${0.0000s, 0.0000075s * 1, 0.0000075s * 2, 0.0000075s * 3, 0.0000075s * 4, 0.0000075s * 5, 0.0000075s * 6, 0.0000075s * 7, 0.0000075s * 8, 0.0000075s * 9, 0.0000075s * 10, 0.0000075s * 11, 0.0000075s * 12, 0.0000075s * 13, 0.0000075s * 14, 0.0000075s * 15, 0.0000075s * 16, 0.0000075s * 17, 0.0000075s * 18, 0.0000075s * 19, 0.0000075s * 20}

BasicWithTrafficInjectionNetwork.asymmetricCapacity = 100Mbps # 100Mbps or 1Gbps

BasicWithTrafficInjectionNetwork.nbPTPDuppToSend = 4

**.trafSource.numUdpApps = 2
**.trafSource.udpApp[0].typename = "UberUDPBasicApp"
**.trafSource.udpApp[0].destAddresses = "trafDest"
**.trafSource.udpApp[0].destPort = 3000
**.trafSource.udpApp[0].messageLength = "StatsCollector.backgroundTrafficMessageLength"
**.trafSource.udpApp[0].sendInterval = "StatsCollector.backgroundTrafficDownstreamOfferedLoad"
**.trafSource.udpApp[0].sendIntervalParetoShape = 1.5
**.trafSource.udpApp[0].sendIntervalDistribution = "pareto"

**.trafSource.udpApp[1].typename = "UberUDPSink"
**.trafSource.udpApp[1].localPort = 3000

**.trafDest.numUdpApps = 2
**.trafDest.udpApp[0].typename = "UberUDPBasicApp"
**.trafDest.udpApp[0].destAddresses = "trafSource"
**.trafDest.udpApp[0].destPort = 3000
**.trafDest.udpApp[0].messageLength = "StatsCollector.backgroundTrafficMessageLength"
**.trafDest.udpApp[0].sendInterval = "StatsCollector.backgroundTrafficUpstreamOfferedLoad"
**.trafDest.udpApp[0].sendIntervalParetoShape = 1.5
**.trafDest.udpApp[0].sendIntervalDistribution = "pareto"

**.trafDest.udpApp[1].typename = "UberUDPSink"
**.trafDest.udpApp[1].localPort = 3000

**.s[*].udpApp[*].ptpPostAsymmAlgo = ""
**.m.udpApp[*].ptpPostAsymmAlgo = ""

**.s[*].udpApp[*].nbPTPDuppToSend = "StatsCollector.nbPTPDuppToSend"
**.m.udpApp[*].nbPTPDuppToSend = "StatsCollector.nbPTPDuppToSend"

**.s[*].udpApp[*].withProbeClass = false
**.m.udpApp[*].withProbeClass = false

# if we vary for instance "downstream.ethg++ <--> DatarateChannelWithPktDelay {  datarate = 100Mbps; delay = 0.001s; } <--> router.ethg++;" in ptpsim.ned,
# the following parameter can be used to correct manually the asymmetry
**.s[*].udpApp[*].DelayAsymmetryDms = 0.001

**.**.eth[*].queueType = "" # PtpPrioritizedQueue

[Config HardwareClockTest]
network = HardwareClockTestNetwork

HardwareClockTestNetwork.boundedDriftClock.drift_distribution          = uniform(-100e-6, 100e-6, 1)
HardwareClockTestNetwork.boundedDriftDeviationClock.drift_distribution = uniform(-100e-6, 100e-6, 2)

HardwareClockTestNetwork.boundedDriftClock.drift.vector-recording = true
HardwareClockTestNetwork.boundedDriftClock.time_deviation.vector-recording = true
HardwareClockTestNetwork.boundedDriftDeviationClock.drift.vector-recording = true
HardwareClockTestNetwork.boundedDriftDeviationClock.time_deviation.vector-recording = true
# disable all other vectors recordings
#**.vector-recording = false
